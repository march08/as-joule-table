{
  // Place your nocodb workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Import styled": {
    "scope": "typescript, typescript-react, javascript, typescriptreact",
    "prefix": "ims",
    "body": ["import styled from 'styled-components';", "$2"],
    "description": "import styled macro component"
  },
  "Import React": {
    "scope": "typescript, typescript-react, javascript, typescriptreact",
    "prefix": "imr",
    "body": ["import React from 'react';", "$2"],
    "description": "import React"
  },
  "Create Functional Component": {
    "scope": "typescript, typescript-react, javascript, typescriptreact",
    "prefix": "crf",
    "body": [
      "export type $1Props = {}",
      "",
      "export const $1: React.FC<$1Props> = (props) => {",
      "  return (",
      "    $2",
      "  )",
      "}"
    ]
  },
  "Create Functional Component - V2": {
    "scope": "typescriptreact",
    "prefix": "crf_2",
    "body": [
      "export type ${TM_FILENAME_BASE}Props = {",
      "",
      "}",
      "",
      "export const $TM_FILENAME_BASE = ({}: ${TM_FILENAME_BASE}Props) => {",
      "  return (",
      "    $0",
      "  )",
      "}"
    ]
  },
  "Create Component Props Type": {
    "scope": "typescriptreact",
    "prefix": "ct",
    "body": ["export type ${TM_FILENAME_BASE}Props = {", "  $0", "}"]
  },
  "Create modal": {
    "scope": "typescript, typescript-react, javascript, typescriptreact",
    "prefix": "crmodal",
    "body": [
      "import { Modal, ModalProps } from \"src/components/Modal\";",
      "",
      "export const Modal$1: React.FC<ModalProps & { }> = ({ ...rest}) => {",
      "  return (",
      "    <Modal {...rest}>",
      "      $2",
      "    </Modal>",
      "  )",
      "}"
    ]
  },
  "Create Hook": {
    "scope": "typescript, typescript-react, javascript, typescriptreact",
    "prefix": "crh",
    "body": ["export const ${TM_FILENAME_BASE} = () => {", "    $0", "}"]
  },
  "Component Dynamic Import": {
    "scope": "typescript, typescript-react, javascript, typescriptreact",
    "prefix": "cdi",
    "body": [
      "import dynamic from \"next/dynamic\";",
      "",
      "// https://docs.stigg.io/docs/nextjs#overview",
      // Regexp extracts only folder name from the full path, see https://stackoverflow.com/a/48366340
      "export const ${TM_DIRECTORY/^.+\\/(.*)$/$1/} = dynamic(",
      "  () => import(\"./${TM_DIRECTORY/^.+\\/(.*)$/$1/}\").then((mod) => mod.${TM_DIRECTORY/^.+\\/(.*)$/$1/}),",
      "  { ssr: false }",
      ");",
      ""
    ]
  }
}
